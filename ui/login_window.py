# =======================================================================================
# üìÑ Dosya Adƒ±   : login_window.py
# üìÅ Konum       : guard_pc/ui/login_window.py
# üìå A√ßƒ±klama    : Kullanƒ±cƒ± giri≈ü ve kayƒ±t penceresi
#                 - Google OAuth entegrasyonu
#                 - Kullanƒ±cƒ± kimlik doƒürulama
#                 - Ana pencereye ge√ßi≈ü
#
# üîó Baƒülantƒ±lƒ± Dosyalar:
#   - services/auth_service.py  : Authentication i≈ülemleri
#   - ui/main_window.py        : Ana uygulama penceresi
#   - ui/styles.py             : UI stil tanƒ±mlarƒ±
#   - config/settings.py       : GUI ayarlarƒ±
# =======================================================================================

import tkinter as tk
from tkinter import ttk, messagebox
import threading
import logging
from PIL import Image, ImageTk
import os
from typing import Optional

from config.settings import Settings
from services.auth_service import get_auth_service
from services.database_service import get_database_service

class LoginWindow:
    """Giri≈ü/Kayƒ±t penceresi sƒ±nƒ±fƒ±"""
    
    def __init__(self, root=None):
        """Login penceresini ba≈ülatƒ±r"""
        if root is None:
            self.root = tk.Tk()
            self.owns_root = True
        else:
            self.root = root
            self.owns_root = False
            
        self.auth_service = get_auth_service()
        self.database_service = get_database_service()
        
        # UI bile≈üenleri
        self.status_label = None
        self.login_button = None
        self.progress_bar = None
        
        # Durum
        self.is_authenticating = False
        
        # Pencereyi olu≈ütur
        self.create_window()
        
        logging.info("LoginWindow olu≈üturuldu")
    
    def create_window(self):
        """Ana pencereyi olu≈üturur"""
        try:
            self.root.title(f"{Settings.APP_NAME} - Giri≈ü")
            self.root.geometry("600x700")
            self.root.resizable(False, False)
            
            # ƒ∞kon ayarla (varsa)
            try:
                icon_path = os.path.join("assets", "icons", "guard_icon.ico")
                if os.path.exists(icon_path):
                    self.root.iconbitmap(icon_path)
            except Exception as e:
                logging.warning(f"ƒ∞kon y√ºklenemedi: {str(e)}")
            
            # Pencereyi ortala
            self._center_window()
            
            # Stil ayarlarƒ±
            self._setup_styles()
            
            # UI bile≈üenlerini olu≈ütur
            self._create_widgets()
            
            # Pencere kapatma olayƒ±
            self.root.protocol("WM_DELETE_WINDOW", self._on_window_close)
            
            logging.info("Login window ba≈üarƒ±yla olu≈üturuldu")
            
        except Exception as e:
            logging.error(f"Login window olu≈üturulurken hata: {str(e)}")
            raise e
    
    def _center_window(self):
        """Pencereyi ekranƒ±n ortasƒ±nda konumlandƒ±rƒ±r"""
        self.root.update_idletasks()
        
        window_width = self.root.winfo_reqwidth()
        window_height = self.root.winfo_reqheight()
        
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        x = (screen_width - 600) // 2
        y = (screen_height - 700) // 2
        
        self.root.geometry(f"600x700+{x}+{y}")
    
    def _setup_styles(self):
        """Stil ayarlarƒ±nƒ± yapar"""
        style = ttk.Style()
        
        # Tema se√ßimi
        try:
            if Settings.THEME_MODE == "dark":
                style.theme_use('clam')
                self.bg_color = "#2C3E50"
                self.fg_color = "#ECF0F1"
                self.accent_color = "#3498DB"
                self.button_bg = "#2980B9"
                self.button_fg = "#FFFFFF"
                self.error_color = "#E74C3C"
                self.success_color = "#2ECC71"
            else:
                style.theme_use('default')
                self.bg_color = "#F5F6F5"
                self.fg_color = "#2C3E50"
                self.accent_color = "#1ABC9C"
                self.button_bg = "#16A085"
                self.button_fg = "#FFFFFF"
                self.error_color = "#C0392B"
                self.success_color = "#27AE60"
        except Exception as e:
            logging.warning(f"Tema ayarlanamadƒ±: {str(e)}")
            style.theme_use('default')
            self.bg_color = "#F5F6F5"
            self.fg_color = "#2C3E50"
            self.accent_color = "#1ABC9C"
            self.button_bg = "#16A085"
            self.button_fg = "#FFFFFF"
            self.error_color = "#C0392B"
            self.success_color = "#27AE60"
        
        # √ñzel stiller
        style.configure('Title.TLabel', font=('Helvetica', 28, 'bold'), foreground=self.fg_color)
        style.configure('Subtitle.TLabel', font=('Helvetica', 14), foreground=self.fg_color)
        style.configure('Large.TButton', font=('Helvetica', 14, 'bold'), padding=12)
        style.configure('Status.TLabel', font=('Helvetica', 12), foreground=self.fg_color)
        style.configure('Info.TLabel', font=('Helvetica', 10), foreground=self.fg_color)
        
        # Button stilleri
        style.configure('Custom.TButton', background=self.button_bg, foreground=self.button_fg)
        style.map('Custom.TButton',
                  background=[('active', self.accent_color)],
                  foreground=[('active', self.button_fg)])
    
    def _create_widgets(self):
        """UI bile≈üenlerini olu≈üturur"""
        # Gradient background
        self.canvas = tk.Canvas(self.root, width=600, height=700, highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True)
        
        # Gradient effect
        for i in range(700):
            t = i / 700
            r = int(44 + (245 - 44) * t)
            g = int(62 + (246 - 62) * t)
            b = int(80 + (245 - 80) * t)
            color = f'#{r:02x}{g:02x}{b:02x}'
            self.canvas.create_line(0, i, 600, i, fill=color)
        
        # Ana frame
        main_frame = ttk.Frame(self.canvas, padding="40", style='Main.TFrame')
        self.canvas.create_window(300, 350, window=main_frame, anchor='center')
        
        # Arka plan i√ßin yarƒ± saydam efekt
        style = ttk.Style()
        style.configure('Main.TFrame', background=self.bg_color, relief='raised', borderwidth=2)
        
        # Logo/ba≈ülƒ±k alanƒ±
        self._create_header(main_frame)
        
        # Spacer
        ttk.Frame(main_frame, height=20).pack()
        
        # Giri≈ü alanƒ±
        self._create_login_section(main_frame)
        
        # Spacer
        ttk.Frame(main_frame, height=20).pack()
        
        # Durum alanƒ±
        self._create_status_section(main_frame)
        
        # Footer
        self._create_footer(main_frame)
    
    def _create_header(self, parent):
        """Ba≈ülƒ±k alanƒ±nƒ± olu≈üturur"""
        header_frame = ttk.Frame(parent)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Logo (varsa)
        try:
            logo_path = os.path.join("assets", "images", "guard_logo.png")
            if os.path.exists(logo_path):
                logo_image = Image.open(logo_path)
                logo_image = logo_image.resize((100, 100), Image.Resampling.LANCZOS)
                logo_photo = ImageTk.PhotoImage(logo_image)
                
                logo_label = ttk.Label(header_frame, image=logo_photo, background=self.bg_color)
                logo_label.image = logo_photo  # Referansƒ± sakla
                logo_label.pack(pady=(0, 15))
        except Exception as e:
            logging.debug(f"Logo y√ºklenemedi: {str(e)}")
        
        # Ba≈ülƒ±k
        title_label = ttk.Label(
            header_frame,
            text=Settings.APP_NAME,
            style='Title.TLabel',
            background=self.bg_color
        )
        title_label.pack()
        
        # Alt ba≈ülƒ±k
        subtitle_label = ttk.Label(
            header_frame,
            text="Ger√ßek Zamanlƒ± D√º≈üme Algƒ±lama Sistemi",
            style='Subtitle.TLabel',
            background=self.bg_color
        )
        subtitle_label.pack(pady=(10, 0))
        
        # Versiyon
        version_label = ttk.Label(
            header_frame,
            text=f"v{Settings.APP_VERSION}",
            font=('Helvetica', 10),
            foreground=self.fg_color,
            background=self.bg_color
        )
        version_label.pack(pady=(10, 0))
    
    def _create_login_section(self, parent):
        """Giri≈ü b√∂l√ºm√ºn√º olu≈üturur"""
        login_frame = ttk.LabelFrame(parent, text="Giri≈ü Yap", padding="20", style='Login.TFrame')
        login_frame.pack(fill=tk.X, pady=(0, 20))
        
        style = ttk.Style()
        style.configure('Login.TFrame', background=self.bg_color, relief='flat')
        
        # A√ßƒ±klama
        info_label = ttk.Label(
            login_frame,
            text="Guard'ƒ± kullanmak i√ßin Google hesabƒ±nƒ±zla giri≈ü yapƒ±n.",
            style='Subtitle.TLabel',
            background=self.bg_color
        )
        info_label.pack(pady=(0, 20))
        
        # Google giri≈ü butonu
        self.login_button = ttk.Button(
            login_frame,
            text="üîê Google ile Giri≈ü Yap",
            style='Custom.TButton',
            command=self._start_google_login
        )
        self.login_button.pack(pady=10, fill=tk.X)
        
        # Progress bar
        self.progress_bar = ttk.Progressbar(
            login_frame,
            mode='indeterminate',
            length=300,
            style='Custom.Horizontal.TProgressbar'
        )
        style.configure('Custom.Horizontal.TProgressbar', troughcolor=self.bg_color, background=self.accent_color)
        self.progress_bar.pack(pady=(10, 0))
        self.progress_bar.pack_forget()  # Ba≈ülangƒ±√ßta gizle
        
        # Offline mod butonu
        offline_button = ttk.Button(
            login_frame,
            text="üîÑ √áevrimdƒ±≈üƒ± Modda Devam Et",
            style='Custom.TButton',
            command=self._start_offline_mode
        )
        offline_button.pack(pady=(10, 0), fill=tk.X)
    
    def _create_status_section(self, parent):
        """Durum b√∂l√ºm√ºn√º olu≈üturur"""
        status_frame = ttk.Frame(parent, style='Status.TFrame')
        status_frame.pack(fill=tk.X, pady=(0, 20))
        
        style = ttk.Style()
        style.configure('Status.TFrame', background=self.bg_color)
        
        # Durum etiketi
        self.status_label = ttk.Label(
            status_frame,
            text="Giri≈ü yapmak i√ßin yukarƒ±daki butona tƒ±klayƒ±n",
            style='Status.TLabel',
            foreground='gray',
            background=self.bg_color
        )
        self.status_label.pack()
        
        # Sistem durumu bilgileri
        self._create_system_status(status_frame)
    
    def _create_system_status(self, parent):
        """Sistem durumu bilgilerini olu≈üturur"""
        status_frame = ttk.LabelFrame(parent, text="Sistem Durumu", padding="15", style='Status.TFrame')
        status_frame.pack(fill=tk.X, pady=(20, 0))
        
        # Firebase durumu
        firebase_status = "‚úÖ Baƒülƒ±" if self._check_firebase_connection() else "‚ùå Baƒülanamadƒ±"
        firebase_label = ttk.Label(
            status_frame,
            text=f"Firebase: {firebase_status}",
            font=('Helvetica', 12),
            background=self.bg_color,
            foreground=self.fg_color
        )
        firebase_label.pack(anchor=tk.W, pady=5)
        
        # Model durumu
        model_status = "‚úÖ Y√ºklendi" if self._check_model_status() else "‚ùå Y√ºklenemedi"
        model_label = ttk.Label(
            status_frame,
            text=f"AI Model: {model_status}",
            font=('Helvetica', 12),
            background=self.bg_color,
            foreground=self.fg_color
        )
        model_label.pack(anchor=tk.W, pady=5)
        
        # Kamera durumu
        camera_status = "‚úÖ Hazƒ±r" if self._check_camera_status() else "‚ùå Bulunamadƒ±"
        camera_label = ttk.Label(
            status_frame,
            text=f"Kamera: {camera_status}",
            font=('Helvetica', 12),
            background=self.bg_color,
            foreground=self.fg_color
        )
        camera_label.pack(anchor=tk.W, pady=5)
    
    def _create_footer(self, parent):
        """Footer alanƒ±nƒ± olu≈üturur"""
        footer_frame = ttk.Frame(parent, style='Footer.TFrame')
        footer_frame.pack(side=tk.BOTTOM, fill=tk.X)
        
        style = ttk.Style()
        style.configure('Footer.TFrame', background=self.bg_color)
        
        # Bilgi metni
        info_text = (
            "Bu uygulama ya≈ülƒ±lar ve hassas bireyler i√ßin ger√ßek zamanlƒ± d√º≈üme "
            "algƒ±lama sistemidir. Gizlilik ve g√ºvenlik en √ºst d√ºzeyde korunmaktadƒ±r."
        )
        
        info_label = ttk.Label(
            footer_frame,
            text=info_text,
            style='Info.TLabel',
            background=self.bg_color,
            wraplength=500,
            justify=tk.CENTER
        )
        info_label.pack(pady=20)
    
    def _check_firebase_connection(self) -> bool:
        """Firebase baƒülantƒ±sƒ±nƒ± kontrol eder"""
        try:
            from config.firebase_config import is_firebase_connected
            return is_firebase_connected()
        except Exception:
            return False
    
    def _check_model_status(self) -> bool:
        """Model durumunu kontrol eder"""
        try:
            from models.fall_detector import get_fall_detector
            detector = get_fall_detector()
            return detector.is_loaded
        except Exception:
            return False
    
    def _check_camera_status(self) -> bool:
        """Kamera durumunu kontrol eder"""
        try:
            import cv2
            cap = cv2.VideoCapture(Settings.CAMERA_INDEX)
            is_opened = cap.isOpened()
            cap.release()
            return is_opened
        except Exception:
            return False
    
    def _start_google_login(self):
        """Google OAuth giri≈ü s√ºrecini ba≈ülatƒ±r"""
        if self.is_authenticating:
            return
        
        try:
            self.is_authenticating = True
            self._update_ui_state(True)
            
            # Auth service callback'lerini ayarla
            self.auth_service.start_oauth_flow(
                success_callback=self._on_login_success,
                error_callback=self._on_login_error
            )
            
        except Exception as e:
            logging.error(f"Google giri≈ü ba≈ülatƒ±lƒ±rken hata: {str(e)}")
            self._on_login_error(str(e))
    
    def _start_offline_mode(self):
        """√áevrimdƒ±≈üƒ± modda devam eder"""
        try:
            # Dummy kullanƒ±cƒ± olu≈ütur
            offline_user = {
                'uid': 'offline_user',
                'email': 'offline@guard.local',
                'name': '√áevrimdƒ±≈üƒ± Kullanƒ±cƒ±',
                'picture': '',
                'verified_email': False
            }
            
            # Veritabanƒ±na kaydet
            self.database_service.create_new_user('offline_user', offline_user)
            
            self._update_status("√áevrimdƒ±≈üƒ± modda giri≈ü yapƒ±ldƒ±", "green")
            
            # Ana pencereyi a√ß
            self._open_main_window(offline_user)
            
        except Exception as e:
            logging.error(f"√áevrimdƒ±≈üƒ± mod ba≈ülatƒ±lƒ±rken hata: {str(e)}")
            self._update_status(f"Hata: {str(e)}", "red")
    
    def _on_login_success(self, user_data):
        """Ba≈üarƒ±lƒ± giri≈ü callback'i"""
        try:
            logging.info(f"Giri≈ü ba≈üarƒ±lƒ±: {user_data['email']}")
            
            # UI'yi ana thread'de g√ºncelle
            self.root.after(0, lambda: self._handle_login_success(user_data))
            
        except Exception as e:
            logging.error(f"Login success handler hatasƒ±: {str(e)}")
            self._on_login_error(str(e))
    
    def _handle_login_success(self, user_data):
        """Ana thread'de giri≈ü ba≈üarƒ±sƒ±nƒ± i≈üler"""
        try:
            # Kullanƒ±cƒ±yƒ± veritabanƒ±na kaydet/g√ºncelle
            self.database_service.create_new_user(user_data['uid'], user_data)
            self.database_service.update_last_login(user_data['uid'])
            
            self._update_status("Giri≈ü ba≈üarƒ±lƒ±! Ana pencere a√ßƒ±lƒ±yor...", self.success_color)
            
            # Kƒ±sa gecikme sonrasƒ± ana pencereyi a√ß
            self.root.after(1000, lambda: self._open_main_window(user_data))
            
        except Exception as e:
            logging.error(f"Login success i≈ülenirken hata: {str(e)}")
            self._update_status(f"Hata: {str(e)}", self.error_color)
            self._update_ui_state(False)
    
    def _on_login_error(self, error_message):
        """Giri≈ü hatasƒ± callback'i"""
        logging.error(f"Giri≈ü hatasƒ±: {error_message}")
        
        # UI'yi ana thread'de g√ºncelle
        self.root.after(0, lambda: self._handle_login_error(error_message))
    
    def _handle_login_error(self, error_message):
        """Ana thread'de giri≈ü hatasƒ±nƒ± i≈üler"""
        self._update_status(f"Giri≈ü hatasƒ±: {error_message}", self.error_color)
        self._update_ui_state(False)
        
        # Hata mesajƒ± g√∂ster
        messagebox.showerror(
            "Giri≈ü Hatasƒ±",
            f"Google ile giri≈ü yapƒ±lƒ±rken hata olu≈ütu:\n\n{error_message}\n\n"
            "L√ºtfen internet baƒülantƒ±nƒ±zƒ± kontrol edin ve tekrar deneyin."
        )
    
    def _update_ui_state(self, is_loading: bool):
        """UI durumunu g√ºnceller"""
        if is_loading:
            self.login_button.config(state='disabled', text="Giri≈ü yapƒ±lƒ±yor...")
            self.progress_bar.pack(pady=(10, 0))
            self.progress_bar.start()
            self._update_status("Google OAuth sayfasƒ± a√ßƒ±lƒ±yor...", self.accent_color)
        else:
            self.login_button.config(state='normal', text="üîê Google ile Giri≈ü Yap")
            self.progress_bar.stop()
            self.progress_bar.pack_forget()
            self.is_authenticating = False
    
    def _update_status(self, message: str, color: str = "black"):
        """Durum mesajƒ±nƒ± g√ºnceller"""
        if self.status_label:
            self.status_label.config(text=message, foreground=color)
            logging.info(f"Status: {message}")
    
    def _open_main_window(self, user_data):
        """Ana pencereyi a√ßar"""
        try:
            # Ana pencereyi import et ve a√ß
            from ui.main_window import MainWindow
            
            main_window = MainWindow(user_data, self.root)
            
            # Login penceresini gizle
            self._hide_login_window()
            
        except Exception as e:
            logging.error(f"Ana pencere a√ßƒ±lƒ±rken hata: {str(e)}")
            messagebox.showerror(
                "Uygulama Hatasƒ±",
                f"Ana pencere a√ßƒ±lƒ±rken hata olu≈ütu:\n\n{str(e)}"
            )
            
            # Login penceresini tekrar g√∂ster
            self._show_login_window()
    
    def _hide_login_window(self):
        """Login penceresini gizler"""
        for widget in self.root.winfo_children():
            widget.destroy()
    
    def _show_login_window(self):
        """Login penceresini tekrar g√∂sterir"""
        self._create_widgets()
        self._update_ui_state(False)
    
    def _on_window_close(self):
        """Pencere kapatma olayƒ±nƒ± i≈üler"""
        try:
            if self.is_authenticating:
                response = messagebox.askyesno(
                    "√áƒ±kƒ±≈ü",
                    "Giri≈ü i≈ülemi devam ediyor. Yine de √ßƒ±kmak istiyor musunuz?"
                )
                if not response:
                    return
            
            logging.info("Login penceresi kapatƒ±lƒ±yor")
            
            if self.owns_root:
                self.root.quit()
            else:
                import sys
                sys.exit(0)
            
        except Exception as e:
            logging.error(f"Pencere kapatƒ±lƒ±rken hata: {str(e)}")
            if self.owns_root:
                self.root.quit()
            else:
                import sys
                sys.exit(0)
    
    def run(self):
        """Pencereyi √ßalƒ±≈ütƒ±rƒ±r"""
        try:
            self.create_window()
            
            logging.info("Login penceresi ba≈ülatƒ±lƒ±yor")
            self.root.mainloop()
            
        except Exception as e:
            logging.error(f"Login penceresi √ßalƒ±≈üƒ±rken hata: {str(e)}")
            raise e
        finally:
            if self.root:
                try:
                    self.root.destroy()
                except:
                    pass

# Test fonksiyonu
def test_login_window():
    """Login window'u test eder"""
    try:
        # Logging'i ba≈ülat
        logging.basicConfig(level=logging.INFO)
        
        # Login window'u olu≈ütur ve √ßalƒ±≈ütƒ±r
        login_window = LoginWindow()
        login_window.run()
        
    except Exception as e:
        logging.error(f"Test sƒ±rasƒ±nda hata: {str(e)}")

if __name__ == "__main__":
    test_login_window()